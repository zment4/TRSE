unit Screen;
@use "memory"
var
	const VIC_BASE: integer = $D000;
	addr : integer;
	bank, val,y,x,j : byte;
	zp:^byte;
	spritePointerAddress: integer at $D06C;

	ytable80 : array[25] of integer = BuildTable("0x0800 + i*80");

/**
Sets a 16-bit sprite pointer to sprite [j] at  [x /64 + y*$4000]. For instance, 
if you have sprites located at $8000, set the frame by calling
<code>
Screen::Set16bitSpritePointer( myFrame, 0, 2); // Sprite 0 at $4000*2 + myFrame 
</code>
**/
procedure Set16bitSpritePointer(zp:^byte global;j,x,y:byte global);
begin
	j:=j*2;
	zp[j]:=x;
	zp[j+1]:=y; // $8000
	poke(^$D06E,0,%10000000);
end;

/**
Sets the character data address at the 16-bit location given in parameter 1 with bank from parameter 2.
**/
procedure SetCharsetLocation(addr: global integer; bank:global byte);
begin
	poke(VIC_BASE + ^$68, 0, lo(addr));
    poke(VIC_BASE + ^$69, 0, hi(addr));
    poke(VIC_BASE + ^$6A, 0, bank);
end;

/**
Sets the column mode to 40 (320x200)

**/
procedure Set40ColumnMode() inline;
begin
	asm("
		lda $D031
		and #%01111111
		sta $d031
	");
end;

/**
Sets the column mode to 80 (640x200)

**/

procedure Set80ColumnMode() inline;
begin
	asm("
		lda $D031
		ora #%10000000
		sta $d031
	");
end;

/**
Sets the screen location address at the 16-bit location given in parameter 1 with bank from parameter 2.
**/
procedure SetScreenLocation(addr: global integer; bank:global byte);
begin
	poke(VIC_BASE + ^$60, 0, lo(addr));
    poke(VIC_BASE + ^$61, 0, hi(addr));
    poke(VIC_BASE + ^$62, 0, bank);
end;

/**
Sets the current screen bank on the VIC4
**/

procedure SetBank(bank : global byte);
begin
	asm("
        ldy Screen_bank
		lda #$00
        tax 
;        tay 
        taz 
        map
	");
end;


/**
While regular 40-colum mode color (40x25 bytes) ram is located at $D800, color
ram for 80-column mode is located at $0001 F800. This method uses
the memory unit to fill the 32-bit color ram at this location with the value provided
from parameter 1.  
**/
procedure FillColorRam80(val: global byte);
begin
	Memory::zpLo := $F800;  
	Memory::zpHi := $0001; // 32 bit addressing through pointers
	for y:=0 to 10 do begin // 10 * 200 = 25*80 = 2000 bytes 
		for x:=0 to 200 do 
		begin
			Memory::Poke32(x,val);
		end;
		Memory::zpLo:=Memory::zpLo+200;
	end;


end;

/**
The VIC4 is hidden by default on the mega65. Use this method to make it visible for regular pokes. 
**/

procedure EnableVIC4();
begin
	asm("
		lda #$47  
        sta $d02f
        lda #$53
        sta $d02f
	");
end;


/**
Enables FAST mode on the Mega65
**/
procedure SetFastMode();
begin
	asm("	   
		lda #65
         sta 0
	");
end;

/**
Initializes the screen of the mega65
**/
procedure Init();
begin
	asm("	
         lda #$47
         sta $d02f
         lda #$53
         sta $d02f
         ; no interrupts
         sei
         
		

		 lda #$00
        tax 
        tay 
        taz 
        map
        eom

	");


end;


end.
